# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  anchore: anchore/anchore-engine@1.6.0
  deploy-kube: mojaloop/deployment@0.1.6

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --update --no-cache add \
    git \
    ca-certificates \
    curl \
    openssh-client \
    -t build-dependencies make gcc g++ python3 libtool autoconf automake
  npm config set unsafe-perm true
  npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
  apk --update --no-cache add \
          python3 \
          py3-pip \
          groff \
          less \
          mailcap
  pip3 install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

src_working_directory: &src_working_directory
  # The working directory for this project (place where package.json is) is /src,
  # as opposed to the project root
  working_directory: ~/git/src

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project/git
    docker:
      - image: node:12.18.0-alpine

  default-machine:
    working_directory: /home/circleci/project/git
    machine:
      image: ubuntu-1604:201903-01

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Update NPM install (using `npm ci`)
          command: cd src && npm ci
      - run:
          name: Delete build dependencies
          command: apk del build-dependencies
      - save_cache:
          key: dependency-cache-v1-{{ checksum "src/package-lock.json" }}
          paths:
            - src/node_modules
            - src/lib/log/node_modules
            - src/lib/validate/node_modules

  test-unit:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-v1-{{ checksum "src/package-lock.json" }}
          paths:
            - src/node_modules
            - src/lib/log/node_modules
            - src/lib/validate/node_modules
      - run:
          name: Execute linting pass
          command: cd src && npm run lint
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
      - run:
          name: Execute unit tests
          command: cd src && npm run test > ../test/results/results.txt
      - store_artifacts:
          path: ./test/results
          prefix: test
      - store_test_results:
          path: ./test/results

  test-coverage:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-v1-{{ checksum "src/package-lock.json" }}
          paths:
            - src/node_modules
            - src/lib/log/node_modules
            - src/lib/validate/node_modules
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - run:
          name: Execute code coverage check
          command: cd src && npm -s run test:coverage-check
      - store_artifacts:
          path: ./src/coverage
          prefix: test
      - store_test_results:
          path: ./src/coverage
      - run:
          name: Copy code coverage to SonarQube
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
                echo "Sending lcov.info to SonarQube..."
                aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/$CIRCLE_PROJECT_REPONAME/lcov.info
            else
                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
            fi

  vulnerability-check:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-v1-{{ checksum "src/package-lock.json" }}
          paths:
            - src/node_modules
            - src/lib/log/node_modules
            - src/lib/validate/node_modules
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
      - run:
          name: Check for new npm vulnerabilities
          command: cd src && npm run audit:check --silent -- --json > ../audit/results/auditResults.json
      - store_artifacts:
          path: ./audit/results
          prefix: audit

  audit-licenses:
    executor: default-docker
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-v1-{{ checksum "src/package-lock.json" }}
          paths:
            - src/node_modules
            - src/lib/log/node_modules
            - src/lib/validate/node_modules
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          <<: *defaults_license_scanner
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  build:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Build Docker $CIRCLE_TAG image
          command: >
            echo "Building Docker image: $CIRCLE_TAG"

            docker build
            --build-arg=BUILD_DATE="$(date -u --iso-8601=seconds)"
            --build-arg=VERSION="$RELEASE_TAG"
            --build-arg=VCS_URL="$CIRCLE_REPOSITORY_URL"
            --build-arg=VCS_REF="$CIRCLE_SHA1"
            -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG .
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar

  build-local:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Build Docker local image for testing
          command: >
            echo "Building Docker image: local"

            docker build
            --build-arg=BUILD_DATE="$(date -u --iso-8601=seconds)"
            --build-arg=VERSION="local"
            --build-arg=VCS_URL="$CIRCLE_REPOSITORY_URL"
            --build-arg=VCS_REF="$CIRCLE_SHA1"
            -t $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local .
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar

  license-scan:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          <<: *defaults_license_scanner
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && mode=docker dockerImages=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:local make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  image-scan:
    executor: anchore/anchore_engine
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - anchore/analyze_local_image:
          dockerfile_path: ./Dockerfile
          image_name: ${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:local
          # Anchore bug: if policy_failure is `true`, reports don't get written - we manually check for failures below
          policy_failure: false
          timeout: '500'
      - run:
          name: Evaluate Failures.
          command: |
            if [[ ! $(which jq) ]]; then
              (set +o pipefail; apk add jq || apt-get install -y jq || yum install -y jq)
            fi
            if [[ $(ls anchore-reports/*content-os*.json 2> /dev/null) ]]; then
              printf "\n%s\n" "The following OS packages are installed:"
              jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' anchore-reports/*content-os*.json
            fi
            if [[ $(ls anchore-reports/*vuln*.json 2> /dev/null) ]]; then
              printf "\n%s\n" "The following vulnerabilities were found:"
              jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' anchore-reports/*vuln*.json
            fi
      - run:
          name: Upload Anchore reports to s3
          command: |
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/${CIRCLE_PROJECT_REPONAME}/ --recursive
            aws s3 rm ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive --exclude "*" --include "${CIRCLE_PROJECT_REPONAME}*"
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive

            # TODO: Enable this when we want to increase the strictness of our security policies
            # failCount=$(cat anchore-reports/*policy*.json | grep 'fail' | wc -l)
            # echo "FailCount is: ${failCount}"
            # if [ $failCount -gt 0 ]; then
            #   printf "Failed with a policy failure count of: ${failCount}"
            #   exit 1
            # fi
      - store_artifacts:
          path: anchore-reports

  publish:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          name: Login to Docker Hub
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Re-tag pre built image
          command: |
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
          command: |
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
            echo "Publishing $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
            docker push $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          name: Slack announcement for tag releases
          command: |
            curl -X POST \
              $SLACK_WEBHOOK_ANNOUNCEMENT \
              -H 'Content-type: application/json' \
              -H 'cache-control: no-cache' \
              -d "{\"text\": \"*${CIRCLE_PROJECT_REPONAME}* - Release \`${CIRCLE_TAG}\`: https://github.com/mojaloop/${CIRCLE_PROJECT_REPONAME}/releases/tag/${CIRCLE_TAG}\"}"

  deploy:
    executor: deploy-kube/helm-kube
    steps:
      - checkout
      - deploy-kube/setup_and_run:
          helm_set_values: |
            --set finance-portal.frontend.image.repository=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME \
            --set finance-portal.frontend.image.tag=$CIRCLE_TAG

##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - test-coverage:
          context: org-global
          requires:
            - setup
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - vulnerability-check:
          context: org-global
          requires:
            - setup
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - build-local:
          context: org-global
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - license-scan:
          context: org-global
          requires:
            - build-local
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - image-scan:
          context: org-global
          requires:
            - build-local
          filters:
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
                - /hotfix*/
      - build:
          context: org-global
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
      - publish:
          context: org-global
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
      - deploy:
          context: org-global
          requires:
            - publish
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?/
            branches:
              ignore:
                - /.*/
