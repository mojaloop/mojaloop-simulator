# CircleCI v2.1 Config
version: 2.1

##
# orbs
#
# Orbs used in this pipeline
##
orbs:
  anchore: anchore/anchore-engine@1.6.0
  deploy-kube: mojaloop/deployment@0.1.6

##
# defaults
#
# YAML defaults templates, in alphabetical order
##
defaults_Dependencies: &defaults_Dependencies |
  apk --update --no-cache add \
    git \
    ca-certificates \
    curl \
    openssh-client \
    -t build-dependencies make gcc g++ python3 libtool autoconf automake
  npm config set unsafe-perm true
  npm install -g node-gyp

defaults_awsCliDependencies: &defaults_awsCliDependencies |
  apk --update --no-cache add \
          python3 \
          py3-pip \
          groff \
          less \
          mailcap
  pip install --upgrade awscli==1.14.5 s3cmd==2.0.1 python-magic

defaults_license_scanner: &defaults_license_scanner
  name: Install and set up license-scanner
  command: |
    git clone https://github.com/mojaloop/license-scanner /tmp/license-scanner
    cd /tmp/license-scanner && make build default-files set-up

##
# Executors
#
# CircleCI Executors
##
executors:
  default-docker:
    working_directory: /home/circleci/project/git
    docker: 
      - image: node:12.16.0-alpine

  default-machine:
    working_directory: /home/circleci/project/git
    machine:
      image: ubuntu-1604:201903-01

  helm-kube:
    working_directory: /home/circleci/project
    docker: 
      - image: hypnoglow/kubernetes-helm

##
# Jobs
#
# A map of CircleCI jobs
##
jobs:
  setup:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Access npm folder as root
          command: cd $(npm root -g)/npm
      - run:
          name: Install node-gyp globally
          command: npm install -g node-gyp
      - run:
          name: Update NPM install
          command: npm install
          <<: *src_working_directory
      - save_cache:
          key: dependency-cache-{{ checksum "./src/package.json" }}
          paths:
            - ./src/node_modules

  test-unit:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          key: dependency-cache-{{ checksum "./src/package.json" }}
      - run:
          name: Install tape and tap-xunit
          command: npm install tape tap-xunit
          <<: *src_working_directory
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
          <<: *src_working_directory
      - run:
          name: Install tapes
          command: npm install -g tapes
          <<: *src_working_directory
      - run:
          name: Execute unit tests
          command: npm -s run test:xunit > ./test/results/tape.xml
          <<: *src_working_directory
      - store_artifacts:
          path: ./src/test/results
          prefix: test
      - store_test_results:
          path: ./src/test/results

  test-coverage:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "./src/package.json" }}
      - run:
          name: Run install again for nested package.json files
          command: npm install
          <<: *src_working_directory
      - run:
          name: Execute code coverage check
          command: npm -s run test:coverage-check
          <<: *src_working_directory
      - store_artifacts:
          path: ./src/coverage
          prefix: test
      - store_test_results:
          path: ./src/coverage
      - run:
          name: Copy code coverage to SonarQube
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ];
            then
                echo "Sending lcov.info to SonarQube..."
                aws s3 cp coverage/lcov.info $AWS_S3_DIR_SONARQUBE/$CIRCLE_PROJECT_REPONAME/lcov.info
            else
                echo "Not a release (env CIRCLE_BRANCH != 'master'), skipping sending lcov.info to SonarQube."
            fi
          <<: *src_working_directory

  vulnerability-check:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - restore_cache:
          key: dependency-cache-{{ checksum "./src/package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./audit/results
          <<: *src_working_directory
      - run:
          name: Check for new npm vulnerabilities
          command: npm run audit:check --silent -- --json > ./audit/results/auditResults.json 
          <<: *src_working_directory
      - store_artifacts:
          path: ./src/audit/results
          prefix: audit

  audit-licenses:
    executor: default-docker
    steps:
      - checkout
      - run:
          name: Install general dependencies
          command: *defaults_Dependencies
      - run:
          <<: *defaults_license_scanner
      - restore_cache:
          key: dependency-cache-{{ checksum "./src/package.json" }}
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
          <<: *src_working_directory
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  test-integration:
    executor: default-machine
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "./src/package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
          <<: *src_working_directory
      - run:
          name: Execute integration tests
          command: npm -s run test:integration
          <<: *src_working_directory
      - store_artifacts:
          path: ./src/test/results
          prefix: test
      - store_test_results:
          path: ./src/test/results

  test-functional:
    executor: default-machine
    steps:
      - checkout
      - run:
          name: Add the Postgres 9.6 binaries to the path.
          command: echo ‘/usr/lib/postgresql/9.6/bin/:$PATH’ >> $BASH_ENV
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            mv ~/docker-compose /usr/local/bin/docker-compose
      - restore_cache:
          key: dependency-cache-{{ checksum "./src/package.json" }}
      - run:
          name: Create dir for test results
          command: mkdir -p ./test/results
          <<: *src_working_directory
      - run:
          name: Execute functional tests
          command: npm -s run test:functional
          <<: *src_working_directory
      - store_artifacts:
          path: ./src/test/results
          prefix: test
      - store_test_results:
          path: ./src/test/results

  build:
    executor: default-machine
    steps:
      - checkout
      - run:
          <<: *defaults_build_docker_build
      - run:
          name: Save docker image to workspace
          command: docker save -o /tmp/docker-image.tar $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
      - persist_to_workspace:
          root: /tmp
          paths:
            - ./docker-image.tar

  license-scan:
    executor: default-machine
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          <<: *defaults_license_scanner
      - run:
          name: Run the license-scanner
          command: cd /tmp/license-scanner && mode=docker dockerImage=$DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG make run
      - store_artifacts:
          path: /tmp/license-scanner/results
          prefix: licenses

  image-scan:
    executor: anchore/anchore_engine
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: *defaults_awsCliDependencies
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - anchore/analyze_local_image:
          dockerfile_path: ./Dockerfile
          image_name: ${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}
          # Anchore bug: if policy_failure is `true`, reports don't get written - we manually check for failures below
          policy_failure: false
          timeout: '500'
      - run:
          name: Evaluate Failures.
          command: |
            if [[ ! $(which jq) ]]; then
              (set +o pipefail; apk add jq || apt-get install -y jq || yum install -y jq)
            fi
            if [[ $(ls anchore-reports/*content-os*.json 2> /dev/null) ]]; then
              printf "\n%s\n" "The following OS packages are installed:"
              jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' anchore-reports/*content-os*.json
            fi
            if [[ $(ls anchore-reports/*vuln*.json 2> /dev/null) ]]; then
              printf "\n%s\n" "The following vulnerabilities were found:"
              jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' anchore-reports/*vuln*.json
            fi

      - run:
          name: Upload Anchore reports to s3
          command: |
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/${CIRCLE_PROJECT_REPONAME}/ --recursive
            aws s3 rm ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive --exclude "*" --include "${CIRCLE_PROJECT_REPONAME}*"
            aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive
        
            # TODO: Enable this when we want to increase the strictness of our security policies
            # failCount=$(cat anchore-reports/*policy*.json | grep 'fail' | wc -l)
            # if [ $failCount -gt 0 ]; then
            #   printf "Failed with a policy failure count of: ${failCount}"
            #   exit 1
            # fi

      - store_artifacts:
          path: anchore-reports

  publish:
    executor: default-machine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Load the pre-built docker image from workspace
          command: docker load -i /tmp/docker-image.tar
      - run:
          <<: *defaults_build_docker_login
      - run:
          name: setup environment vars for release/snapshot
          command: ./.circleci/_set_up_deploy_envs.sh
      - run:
          name: Re-tag pre built image
          command: |
            docker tag $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG $DOCKER_ORG/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
      - run:
          <<: *defaults_build_docker_publish
      - run:
          <<: *defaults_slack_announcement
        

 
##
# Workflows
#
# CircleCI Workflow config
##
workflows:
  version: 2
  build_and_test:
    jobs:
      - setup:
          context: org-global
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-unit:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - test-coverage:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - vulnerability-check:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - audit-licenses:
          context: org-global
          requires:
            - setup
          filters:
            tags:
              only: /.*/
            branches:
              ignore:
                - /feature*/
                - /bugfix*/
      - build:
          context: org-global
          requires:
            - setup
            - test-unit
            - test-coverage
            - vulnerability-check
            - audit-licenses
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
      - license-scan:
          context: org-global
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
      - image-scan:
          context: org-global
          requires:
            - build
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/
      - publish:
          context: org-global
          requires:
            - license-scan
            - image-scan
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(\-snapshot)?(\-hotfix(\.[0-9]+))?/
            branches:
              ignore:
                - /.*/